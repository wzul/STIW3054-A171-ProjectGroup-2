package com.repo2.generatepdf;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.Date;

public class GeneratePDF {

    public static final String CLONELOG = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "clone.log";
    public static final String COMPILELOG = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "compile.log";
    public static final String RUNLOG = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "run.log";

    public static final String CLONEPDF = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "clone.pdf";
    public static final String COMPILEPDF = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "compile.pdf";
    public static final String RUNPDF = System.getProperty("user.dir") + File.separator + "STIW3054-Result" + File.separator + "run.pdf";

    public GeneratePDF() throws DocumentException, IOException {
        File file = new File(CLONELOG);
        File file2 = new File(COMPILELOG);
        File file3 = new File(RUNLOG);

        createClonePdf(CLONEPDF);
        createCompilePdf(COMPILEPDF);
        createRunPdf(RUNPDF);
    }

    public void createClonePdf(String clonepdf) throws FileNotFoundException, DocumentException, IOException {

        try {
            sleep(5 * 1000);
        } catch (InterruptedException ex) {
        }
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(clonepdf));
        document.open();

        BufferedReader br = new BufferedReader(new FileReader(CLONELOG));
        String line;
        Paragraph p, p2, p3;

        Font normal = new Font(FontFamily.TIMES_ROMAN, 18, Font.BOLD);
        Font bold = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD);
        Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);

        p = new Paragraph("Clone Log File", normal);
        addEmptyLine(p, 2);
        p2 = new Paragraph("Report generated by: Team 2, " + new Date(), bold);
        addEmptyLine(p2, 2);

        document.add(p);
        document.add(p2);

        while ((line = br.readLine()) != null) {

            p3 = new Paragraph(line, redFont);
            p.setAlignment(Element.ALIGN_JUSTIFIED);
            document.add(p3);

        }
        document.close();
    }

    public void createCompilePdf(String compilepdf) throws FileNotFoundException, DocumentException, IOException {

        try {
            sleep(30 * 1000);
        } catch (InterruptedException ex) {
        }
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(compilepdf));
        document.open();

        BufferedReader br = new BufferedReader(new FileReader(COMPILELOG));
        String line;
        Paragraph p, p2, p3;

        Font normal = new Font(FontFamily.TIMES_ROMAN, 18, Font.BOLD);
        Font bold = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD);
        Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);

        p = new Paragraph("Compile Log File", normal);
        addEmptyLine(p, 2);
        p2 = new Paragraph("Report generated by: Team 2, " + new Date(), bold);
        addEmptyLine(p2, 2);

        document.add(p);
        document.add(p2);

        while ((line = br.readLine()) != null) {

            p3 = new Paragraph(line, redFont);
            p.setAlignment(Element.ALIGN_JUSTIFIED);
            document.add(p3);

        }
        document.close();
    }

    public void createRunPdf(String runpdf) throws FileNotFoundException, DocumentException, IOException {

        try {
            sleep(30 * 1000);
        } catch (InterruptedException ex) {
        }
        Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(runpdf));
        document.open();

        BufferedReader br = new BufferedReader(new FileReader(RUNLOG));
        String line;
        Paragraph p, p2, p3;

        Font normal = new Font(FontFamily.TIMES_ROMAN, 18, Font.BOLD);
        Font bold = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD);
        Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);

        p = new Paragraph("Run Log File", normal);
        addEmptyLine(p, 2);
        p2 = new Paragraph("Report generated by: Team 2, " + new Date(), bold);
        addEmptyLine(p2, 2);

        document.add(p);
        document.add(p2);

        while ((line = br.readLine()) != null) {

            p3 = new Paragraph(line, redFont);
            p.setAlignment(Element.ALIGN_JUSTIFIED);
            document.add(p3);

        }
        document.close();
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}
